{"version":3,"file":"model.js","sourceRoot":"","sources":["../src/model.ts"],"names":[],"mappings":"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","sourcesContent":["import { FieldMap, IFieldList } from './fieldmap';\nimport { buildProperties } from './buildproperties';\nimport { Class, inherit } from './inherit';\n\ninterface IDocument {\n  [key: string]: any;\n}\n\nexport interface IModel extends Function {\n  readonly fieldMap: FieldMap;\n  extend: Function;\n}\n\nexport function create(fields: IFieldList | Array<string> | string, superConstructor?: { new(...args: Array<any>): any }): IModel {\n  const fieldMap = new FieldMap(fields);\n\n  /*\n   * Get a Model class\n   * @class\n   * @property {object} fieldMap FieldMap instance.\n   * @property {array} __d Current internal data values.\n   * @property {array} __p Previous internal data values.\n   * @return {Model} Model\n   */\n  return class Model {\n    [src: string]: any;\n\n    private __d: Array<any>;\n    private __p: Array<any>;\n\n    constructor(initializer: IFieldList, aliased?: boolean) {\n      this.deserialize(initializer, aliased);\n    }\n\n    public static extend(child: Class, moreFields: IFieldList | Array<string> | string) {\n      if (!child) {\n        // clone\n\n        child = create(fieldMap.fields);\n      }\n      else if (!child.prototype) {\n        // fields only\n\n        moreFields = child;\n        fieldMap.merge(moreFields);\n        child = create(fieldMap.fields);\n      }\n      else {\n        // child is new Class\n\n        fieldMap.merge(moreFields);\n        child.fieldMap = fieldMap;\n      }\n\n      inherit(child, this);\n\n      child.fieldMap = fieldMap;\n      buildProperties(<IModel> child);\n\n      return child;\n    }\n\n    public static get fieldMap(): FieldMap {\n      return fieldMap;\n    }\n\n    public toString(): string {\n      return this.serialize();\n    }\n\n    public serialize() {\n      return JSON.stringify(this);\n    }\n\n    public deserialize(obj: IFieldList, aliased?: boolean) {\n      if (typeof(obj) === 'string')\n        obj = JSON.parse(obj);\n\n      for (let dest in obj) {\n        if (obj.hasOwnProperty(dest)) {\n          let key = aliased ? fieldMap.getSrcKey(dest) : dest;\n          this[key] = obj[dest];\n        }\n      }\n\n      return this;\n    }\n\n    /*\n     * Function to implement when JSON.stringify called on instance.\n     * @method\n     * @return {object} Object to stringify.\n     */\n    public toJSON() {\n      return this.toDocument();\n    }\n\n    /*\n     * Returns a simple document with aliased property names.\n     * @method\n     * @param {boolean} aliased Boolean switch to specify whether property name fields should be returned with document.\n     * @return {object} Value if val undefined.\n     */\n    public toDocument(aliased?: boolean) {\n      let doc: IDocument = {};\n\n      if (this.__d) {\n        for (let i = 0, { length } = this.__d; i < length; i++) {\n          let val = this.__d[i];\n\n          if (typeof(val) !== 'undefined') {\n            let src = fieldMap.src.keys[i];\n\n            let key = aliased ? fieldMap.getDestKey(src) : src;\n            doc[key] = this[src];\n          }\n        }\n      }\n\n      return doc;\n    }\n\n    private init() {\n      if (!this.__d) {\n        this.__d = new Array(fieldMap.dest.keys.length);\n        this.__p = new Array(fieldMap.dest.keys.length);\n      }\n    }\n\n    /*\n     * Get / Set internal value for property alias.\n     * @virtual\n     * @param {string} dest Destination property alias.\n     * @param {object} val Optional value to set.\n     * @return {object} Value if val undefined.\n     */\n    private data(dest: string, val?: any): any {\n      this.init();\n\n      let i = fieldMap.dest.index[dest];\n\n      if (typeof(val) !== 'undefined') {\n        this.__d[i] = val;\n        return;\n      }\n      else if (typeof(dest) !== 'undefined') {\n        return this.__d[i];\n      }\n      else {\n        return this.__d;\n      }\n    }\n\n    /*\n     * Return previous internal value for property alias\n     * @method\n     * @param {string} dest Destination property alias.\n     * @return {object} Value.\n     */\n    private prev(dest: string) {\n      let i = fieldMap.dest.index[dest];\n      return this.__p[i];\n    }\n\n    /*\n     * Get value for property name.\n     * @virtual\n     * @param {string} src Source property name.\n     * @return {object} Value.\n     */\n    private getValue(src: string): any {\n      \n\n      let dest = fieldMap.getDestKey(src);\n\n      console.log('getValue src', src, dest, this.data(dest));\n\n      let val = this.data(dest);\n\n      if (typeof(dest) === 'undefined')\n        throw new Error(`No value for key \"${ src }\"`);\n\n      return this.data(dest);\n    }\n\n    /*\n     * Set value for property name.\n     * @virtual\n     * @param {string} src Source property name.\n     * @param {object} val Value to set.\n     * @return {string} Property alias.\n     */\n    private setValue(src: string, val: any): any {\n      let dest = fieldMap.getDestKey(src);\n      let previousVal = this.data(dest);\n\n      if (typeof(previousVal) !== 'undefined') {\n        let i = fieldMap.dest.index[dest];\n        this.__p[i] = previousVal;\n      }\n\n      if (val !== previousVal)\n        this.data(dest, val);\n\n      return dest;\n    }\n  }\n}\n"]}