{"version":3,"file":"fieldmap.js","sourceRoot":"","sources":["../src/fieldmap.ts"],"names":[],"mappings":";;AAWA;IAwBE,kBAAY,MAA2C;QAvBhD,QAAG,GAAY;YACpB,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;SACV,CAAC;QACK,SAAI,GAAY;YACrB,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,EAAE;SACV,CAAC;QAEM,UAAK,GAAG,CAAC,CAAC;QACX,WAAM,GAAe,EAAE,CAAC;QAc7B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACrB,CAAC;IAQM,4BAAS,GAAhB,UAAiB,IAAY;QAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IAQM,6BAAU,GAAjB,UAAkB,GAAW;QAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAAC;IAEO,sBAAG,GAAX,UAAY,CAAS,EAAE,CAAK;QAAL,kBAAA,EAAA,KAAK;QAC1B,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAE1B,IAAA,SAAiC,EAAhC,gBAAK,EAAE,kBAAM,EAAE,YAAG,EAAE,cAAI,CAAS;QAEtC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAEd,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAElB,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;YAEtB,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;IACH,CAAC;IAOM,wBAAK,GAAZ,UAAa,MAA2C;QACtD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,EAAE,CAAC,CAAC,OAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC;gBAC9B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;YAEpB,EAAE,CAAC,CAAC,MAAM,YAAY,KAAK,CAAC,CAAC,CAAC;gBAC5B,GAAG,CAAC,CAAK,IAAA,CAAC,GAAG,CAAC,EAAG,wBAAM,EAAY,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACnD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC;YACH,CAAC;YACD,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;oBACvB,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC/B,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;wBACvB,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;oBACtB,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IACH,eAAC;AAAD,CAAC,AA3FD,IA2FC;AA3FY,4BAAQ","sourcesContent":["export interface IFieldList {\n  [src: string]: string;\n}\n\nexport interface ILookup {\n  keys: Array<string>;\n  index: {\n    [key: string]: number;\n  };\n}\n\nexport class FieldMap {\n  public src: ILookup = {\n    keys: [],\n    index: {}\n  };\n  public dest: ILookup = {\n    keys: [],\n    index: {}\n  };\n\n  private count = 0;\n  public fields: IFieldList = {};\n\n  /*\n   * Get an FieldMap class\n   * @class\n   * @param {array|object} initializer Array or object of alias mappings.\n   * @property {string[]|object} initializer Array or object of alias mappings.\n   * @property {string[]} srcKeys Source key names.\n   * @property {string[]} destKeys Destination key names.\n   * @property {object} srcIndex Dictionary mapping source key names to srcKeys array indexes.\n   * @property {object} destIndex Dictionary mapping destination key names to destKeys array indexes.\n   * @return {FieldMap} FieldMap.\n   */\n  constructor(fields: IFieldList | Array<string> | string) {\n    this.merge(fields);\n  }\n\n  /*\n   * Get source key name for destination key name\n   * @method\n   * @param {string} dest Destination key name.\n   * @return {string} Source key name.\n   */\n  public getSrcKey(dest: string): string {\n    return this.src.keys[this.dest.index[dest]];\n  }\n\n  /*\n   * Get destination key name for source key name\n   * @method\n   * @param {string} src Source key name.\n   * @return {string} Destination key name.\n   */\n  public getDestKey(src: string): string {\n    return this.dest.keys[this.src.index[src]];\n  }\n\n  private add(s: string, d = s) {\n    console.log('add', arguments);\n\n    let {count, fields, src, dest} = this;\n\n    if (!src.index[s]) {\n      fields[s] = d;\n\n      src.keys.push(s);\n      dest.keys.push(d);\n\n      src.index[s] = count;\n      dest.index[d] = count;\n\n      this.count++;\n    }\n  }\n\n  /*\n   * Initialize instance properties\n   * @method\n   * @param {string[]|object} fields Array or object of alias mappings.\n   */\n  public merge(fields: IFieldList | Array<string> | string) {\n    if (fields) {\n      if (typeof(fields) === 'string')\n        fields = [fields];\n\n      if (fields instanceof Array) {\n        for (let i = 0, {length} = fields; i < length; i++) {\n          this.add(fields[i]);\n        }\n      }\n      else {\n        for (let src in fields) {\n          if (fields.hasOwnProperty(src)) {\n            let dest = fields[src];\n            this.add(src, dest);\n          }\n        }\n      }\n    }\n  }\n}\n"]}