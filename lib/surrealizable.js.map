{"version":3,"file":"surrealizable.js","sourceRoot":"","sources":["../src/surrealizable.ts"],"names":[],"mappings":";;AAEA,qCAAoC;AAEpC,uBAA8B,MAA2C;IACxE,MAAM,CAAC,UAAS,MAAyC;QACtD,IAAI,KAAK,GAAG,iBAAO,CAAC,MAAM,CAAC,CAAC;QAE5B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IA4B/B,CAAC,CAAC;AACH,CAAC;AAjCD,sCAiCC","sourcesContent":["import { FieldMap, IFieldList } from './fieldmap';\nimport { create, IModel } from './model';\nimport { Surreal } from './surreal';\n\nexport function Surrealizable(fields: IFieldList | Array<string> | string): Function {\n\treturn function(target: { new(...args: Array<any>): any }): { new(...args: Array<any>): any } {\n    let Model = Surreal(fields);\n\t\t\n    return Model.extend(target);\n\t\t\n\t\t// return <any> Model;\n    \n\t\t// // save a reference to the original constructor\n\t\t// const original = target;\n\n\t\t// // a utility function to generate instances of a class\n\t\t// function construct(constructor: Function, args: any) {\n    //   let c: any = function () {\n    //     return constructor.apply(this, args);\n    //   }\n    //   c.prototype = constructor.prototype;\n    //   return new c();\n    // }\n\n\t\t// // the new constructor behaviour\n\t\t// let f: any = function (...args: Array<any>) {\n    //   console.log(\"New: \" + original.name);\n    //   // return _super !== null && _super.apply(this, arguments) || this;\n    //   return construct(original.constructor, args);\n    // }\n\n\t\t// // copy prototype so intanceof operator still works\n\t\t// f.prototype = original.prototype;\n\n\t\t// // return new constructor (will override original)\n\t\t// return f;\n\t};\n}\n"]}