{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,6CAAqF;AAErF,iBAA4C,WAAqG,EAAE,GAAG,IAAgB;IACrK,IAAI,UAA2C,CAAC;IAEhD,EAAE,CAAC,CAAC,OAAM,CAAC,WAAW,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;QACxC,UAAU,GAAqC,IAAI,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;IACzE,CAAC;IACD,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,YAAY,KAAK,CAAC,CAAC,CAAC;QACvC,IAAI,KAAK,GAAmB,WAAW,CAAC;QACxC,UAAU,GAAG,IAAI,4BAAe,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,CAAC,CAAC;QACL,IAAI,GAAG,GAAc,WAAW,CAAC;QACjC,IAAI,CAAE,qBAAqB,CAAE,GAAG,IAAI,CAAC;QACrC,UAAU,GAAG,IAAI,0BAAa,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC;QACN,UAAU;QACV,YAAY,EAAE,UAAU,MAAgD;YAEvE,MAAM,QAAQ,GAAG,MAAM,IAAU,mBAAmB,MAAM,CAAC,CAAC,CAAC,CAAC;YAG9D,mBAAmB,WAAqB,EAAE,MAAe,EAAE,CAAM;gBAChE,MAAM,CAAC,GAAQ;oBACd,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,OAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,CAAC;wBAClD,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBAEtC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC;gBACF,CAAC,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;gBACpC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAChB,CAAC;YAGD,IAAI,CAAC,GAAQ,UAAU,MAAe,EAAE,GAAG,CAAa;gBACvD,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YACvC,CAAC,CAAC;YAGF,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;YAEjC,CAAC,CAAC,SAAS,CAAC,MAAM,GAAG;gBACpB,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC;YAGF,MAAM,CAAC,CAAC,CAAC;QACV,CAAC;KACD,CAAC;AACH,CAAC;AAlDD,0BAkDC","sourcesContent":["import { FieldMap, ISerializer, MapSerializer, ArraySerializer } from './serializer';\n\nexport function Surreal<TInstance, TRecord>(transformer: { new(...args: Array<any>): ISerializer<TInstance, TRecord> } | FieldMap | Array<string>, ...args: Array<any>) {\n\tlet serializer: ISerializer<TInstance, TRecord>;\n\n\tif (typeof(transformer) === 'function') {\n\t\tserializer = <ISerializer<TInstance, TRecord>> new transformer(...args);\n\t}\n\telse if (transformer instanceof Array) {\n\t\tlet props = <Array<string>> transformer;\n\t\tserializer = new ArraySerializer(props);\n\t}\n\telse {\n\t\tlet map = <FieldMap> transformer;\n\t\tlet [ useMappedPropertyName ] = args;\n\t\tserializer = new MapSerializer(map, useMappedPropertyName);\n\t}\n\n\treturn {\n\t\tserializer,\n\t\tserializable: function (target?: { new(...args: Array<any>): TInstance }): { new(...args: Array<any>): TInstance } {\n\t\t\t// save a reference to the original constructor or fabricate a new one\n\t\t\tconst original = target || <any> function fresh() { return; };\n\n\t\t\t// a utility function to generate instances of a class\n\t\t\tfunction construct(constructor: Function, record: TRecord, a: any) {\n\t\t\t\tconst c: any = function () {\n\t\t\t\t\tif (record !== null && typeof(record) === 'object')\n\t\t\t\t\t\tserializer.deserialize(record, this);\n\n\t\t\t\t\treturn constructor.apply(this, a);\n\t\t\t\t};\n\t\t\t\tc.prototype = constructor.prototype;\n\t\t\t\treturn new c();\n\t\t\t}\n\n\t\t\t// the new constructor behaviour\n\t\t\tlet f: any = function (record: TRecord, ...a: Array<any>) {\n\t\t\t\treturn construct(original, record, a);\n\t\t\t};\n\n\t\t\t// copy prototype so intanceof operator still works\n\t\t\tf.prototype = original.prototype;\n\n\t\t\tf.prototype.toJSON = function () {\n\t\t\t\treturn serializer.serialize(this);\n\t\t\t};\n\n\t\t\t// return new constructor (will override original)\n\t\t\treturn f;\n\t\t}\n\t};\n}\n"]}