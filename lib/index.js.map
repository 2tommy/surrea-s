{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,2CAAqF;AAGrF,iBAA4C,WAAqG;IAAE,cAAmB;SAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;QAAnB,6BAAmB;;IACrK,IAAI,UAA2C,CAAC;IAEhD,EAAE,CAAC,CAAC,OAAM,CAAC,WAAW,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;QACxC,UAAU,GAAG,KAAsC,WAAW,YAAX,WAAW,kBAAI,IAAI,KAAC,CAAC;IACzE,CAAC;IACD,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,YAAY,KAAK,CAAC,CAAC,CAAC;QACvC,IAAI,KAAK,GAAmB,WAAW,CAAC;QACxC,UAAU,GAAG,IAAI,4BAAe,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC;IACD,IAAI,CAAC,CAAC;QACL,IAAI,GAAG,GAAc,WAAW,CAAC;QAC3B,IAAA,+BAAqB,CAAU;QACrC,UAAU,GAAG,IAAI,0BAAa,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC;QACN,UAAU,YAAA;QACV,YAAY,EAAE,UAAU,MAAgD;YACvE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACX,MAAM,GAAS,mBAAmB,MAAM,CAAC,CAAC,CAAC,CAAC;YAsC7C,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG;gBACzB,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACnC,CAAC,CAAC;YAEF,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAU,MAAe;gBACpD,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBAErC,MAAM,CAAC,IAAI,CAAC;YACb,CAAC,CAAC;YAEF,MAAM,CAAC,MAAM,CAAC;QACf,CAAC;KACD,CAAC;AACH,CAAC;AAvED,0BAuEC","sourcesContent":["import { FieldMap, ISerializer, MapSerializer, ArraySerializer } from './serializer';\nexport { ISerializer }\n\nexport function Surreal<TInstance, TRecord>(transformer: { new(...args: Array<any>): ISerializer<TInstance, TRecord> } | FieldMap | Array<string>, ...args: Array<any>) {\n\tlet serializer: ISerializer<TInstance, TRecord>;\n\n\tif (typeof(transformer) === 'function') {\n\t\tserializer = <ISerializer<TInstance, TRecord>> new transformer(...args);\n\t}\n\telse if (transformer instanceof Array) {\n\t\tlet props = <Array<string>> transformer;\n\t\tserializer = new ArraySerializer(props);\n\t}\n\telse {\n\t\tlet map = <FieldMap> transformer;\n\t\tlet [ useMappedPropertyName ] = args;\n\t\tserializer = new MapSerializer(map, useMappedPropertyName);\n\t}\n\n\treturn {\n\t\tserializer,\n\t\tserializable: function (target?: { new(...args: Array<any>): TInstance }): { new(...args: Array<any>): TInstance } {\n\t\t\tif (!target)\n\t\t\t\ttarget = <any> function fresh() { return; };\n\n\t\t\t// // save a reference to the original constructor or fabricate a new one\n\t\t\t// const original = target;\n\t\t\t//\n\t\t\t// // a utility function to generate instances of a class\n\t\t\t// function construct(record: TRecord, a: any) {\n\t\t\t// \tconst c: any = function () {\n\t\t\t// \t\tif (record !== null && typeof(record) === 'object')\n\t\t\t// \t\t\tserializer.deserialize(record, this);\n\t\t\t//\n\t\t\t// \t\treturn original.apply(this, a);\n\t\t\t// \t};\n\t\t\t//\n\t\t\t// \tc.prototype = original.prototype;\n\t\t\t//\n\t\t\t// \treturn new c();\n\t\t\t// }\n\t\t\t//\n\t\t\t// // the new constructor behaviour\n\t\t\t// let f: any = function (record: TRecord, ...a: Array<any>) {\n\t\t\t// \treturn construct(record, a);\n\t\t\t// };\n\t\t\t//\n\t\t\t// // copy prototype so intanceof operator still works\n\t\t\t// f.prototype = original.prototype;\n\t\t\t//\n\t\t\t// f.prototype.toJSON = function () {\n\t\t\t// \treturn serializer.serialize(this);\n\t\t\t// };\n\t\t\t//\n\t\t\t// f.prototype.fromJSON = function (record: TRecord) {\n\t\t\t// \tserializer.deserialize(record, this);\n\t\t\t// };\n\t\t\t//\n\t\t\t// // return new constructor (will override original)\n\t\t\t// return f;\n\n\t\t\ttarget.prototype.toJSON = function () {\n\t\t\t\treturn serializer.serialize(this);\n\t\t\t};\n\n\t\t\ttarget.prototype.fromJSON = function (record: TRecord) {\n\t\t\t\tserializer.deserialize(record, this);\n\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\treturn target;\n\t\t}\n\t};\n}\n"]}