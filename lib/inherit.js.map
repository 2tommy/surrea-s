{"version":3,"file":"inherit.js","sourceRoot":"","sources":["../src/inherit.ts"],"names":[],"mappings":";;AAIA,iBAAiB,KAAY,EAAE,MAAa;IAC1C,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;QACvB,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC7B,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;AACH,CAAC;AAED,qBAAqB,KAAY,EAAE,MAAa;IAC9C,IAAI,IAAI,GAAQ;QACd,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC,CAAA;IAED,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IAClC,KAAK,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;IAC7B,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;AACrC,CAAC;AAED,mCAAmC,KAAY;IAC9C,IAAI,KAAK,GAAU,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAEtC,IAAI,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAE5D,GAAG,CAAC,CAAK,IAAA,CAAC,GAAG,CAAC,EAAI,2BAAM,EAAgB,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxD,IAAI,MAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QACxB,KAAK,CAAC,MAAI,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,MAAI,CAAC,CAAC;IACtC,CAAC;IAEF,MAAM,CAAC,KAAK,CAAC;AACd,CAAC;AAED,mBAAmB,KAAY,EAAE,KAAY;IAE3C,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC;QACtB,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;AACH,CAAC;AAED,iBAAwB,KAAY,EAAE,MAAa;IACjD,IAAI,QAAQ,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAEhD,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACxB,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3B,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAE3B,MAAM,CAAC,KAAK,CAAC;AACd,CAAC;AARD,0BAQC","sourcesContent":["export interface Class extends Function {\n  [key: string]: any;\n}\n\nfunction statics(child: Class, parent: Class) {\n  for (let key in parent) {\n    if (parent.hasOwnProperty(key))\n      child[key] = parent[key];\n  }\n}\n\nfunction constructor(child: Class, parent: Class) {\n  let ctor: any = function () {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  child.__super__ = parent.prototype;\n}\n\nfunction retrieveOriginalPrototype(child: Class) {\n\tlet proto: Class = Object.create(null);\n\n  let propNames = Object.getOwnPropertyNames(child.prototype);\n\n  for (let i = 0, { length } = propNames; i < length; i++) {\n    let name = propNames[i];\n    proto[name] = child.prototype[name];\n  }\n\n\treturn proto;\n}\n\nfunction prototype(child: Class, proto: Class) {\n\t// put back child's original prototype properties\n  for (let key in proto) {\n    child.prototype[key] = proto[key];\n  }\n}\n\nexport function inherit(child: Class, parent: Class) {\n  let original = retrieveOriginalPrototype(child);\n\n  statics(child, parent);\n\tconstructor(child, parent);\n\tprototype(child, original);\n\n\treturn child;\n}"]}